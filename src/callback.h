#ifndef CT_CYTHON_FUNC_WRAPPER
#define CT_CYTHON_FUNC_WRAPPER

#include <stdexcept>

typedef void(*callback_wrapper)(const std::string&, int, void*, void**);

// A function implemented as a callable Python object
class Callback
{
public:
    Callback(callback_wrapper callback, void* pyobj) :
        m_func(callback),
        m_pyobj(pyobj) {
    }

    void eval(const std::string& name, int flag) const;

private:
    callback_wrapper m_func;
    void* m_pyobj;
};

// Translate C++ Exceptions generated by Ember to appropriate Python
// exceptions. Used with Cython function declarations, e.g:
//     cdef double eval(double) except +translate_exception
int translate_callback_exception();

#endif
